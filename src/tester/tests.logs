john
oops
oops"
""
"oops

echo "hello world!"
echo "this is me again"
echo "and again!"
test this
and that
exit
echo hello
echo "hello world!"
echo "this is me again"
echo hello
hello
sarah
da
lol
test 1
test 2
test 3
test 4
test 5
test 6
test6
test7
eqweqwqw
cbsdh jds|        bjcd
vdmh djksb|          jkds
vdmh djksb      |          jkds
"hello'john'hello"
"hello"john"hello"
"hellook'hello"
"hellook"hello"
"
$"HOME"
echo $?
8yi jfdsv |b < CBHJB
8yi 'jfdsv '|b < CBHJB "cjb"
8yi 'jfdsv $hfd'|b < CBHJB "cjb"
yi 'jfdsv $hfd'|b < CBHJB "cjb"
$HOME
ewqe$HOME
echo $HOME $OK
john$HOME
$home
e$home
john$home
john$HOME
testing print
testing "print"
john | ls -l
>> john | ls -l
john | ls -l -a
ls -l
ls -l | john
ls -l | o
ls - l
ls -l | john fine >> maybe
ls -l | john fine >> new
evk |cjnk
ls$home
a$HOME
a$HOME
hfe$HOME
hfe$HOME
$HOME
$HOME$PATH
$HOME $PATH
$HOME$PATH
$HOME$PATH
$HOME$PATH
$PATH$HOME
$PATH
$PATH$LANG
$PATH$LANG
$PATH$LANG
$HOME$PATH
$$
home $HOME '$PATH'
$HOME "$HOME" '$HOME'
$HOME '$HOME'
$HOME$LANG
$HOME$LANG $SHELL$
$HOME$LANG $SHELL$$
$$$
$"$"$
$"$"'$'
$"$"' $'
$$ $ "$"
$$ $ "$" | ls -l
< infile cat $HOME | cat $PATH > outfile
< infile cat argz | cat arg2  > outfile
< infile cat argz | cat arg2  > outfile
< infile cat argz | cat arg2  > outfile
< infile cat argz | cat arg2  > out
<< infile cat argz | cat arg2  > outfile
<< infile cat argz | cat arg2  >> outfile
< infile cmd1 arg1 | cat -e arg2 arg3 > oufile
< infile cmd -option >> some | cmd arg arg arg | smthg
cat -e Makefile | grep "minishell" | wc -l
cat -e $HOME | $?
john"
$?
"hello"
"Hello"
hello "hello" <
hello "hello" <
hello "hello" < infile
"hello" hello |
hello "hello" 'hello' |
### PRINTING 5 TOKENS ###
token[0] content [index]   = hello  [0]
     [0] block             = 0
     [0] category          = COMMAND
     [0] type (quotes)     = WORD (UNQUOTED)

token[1] content [index]   = hello  [1]
     [1] block             = 0
     [1] category          = ARGUMENT
     [1] type (quotes)     = WORD (DOUBLE-QUOTED)

token[2] content [index]   = hello  [2]
     [2] block             = 0
     [2] category          = ARGUMENT
     [2] type (quotes)     = WORD (SINGLE-QUOTED)

token[3] content [index]   = |  [3]
     [3] block             = 0
     [3] category & type   = CONTROL OPERATOR

token[4] content [index]   = newline  [5]
     [4] block             = 1
     [4] category & type   = CONTROL OPERATOR
### 5 TOKENS PRINTED ###
HELLO


		if (tmp->next && tmp->next->block != tmp->block)

cat ls -l
ls -l -a
ls l
ls -l | cat -e john
ls -a -e
ls -l -a | cat -e john
ls -l -a >> john
ls -l -a >> cat -e
ls -l -a | cat -e infile
ls -l -a infilezzz | cat -e infile
ls -l -a infileeazezaazeazzzz | cat -e infile
ls -l eazidnazldna
ls -l eazidnazldnaeazeazeaz
ls -l eazidnazldnaeazez
ls -l eazidnazldnae
ls -l eazidnazldnaez
ls -l eazidnazldnaefse
ls -l eazidnazldnaeeazeazdqqdqsd
ls -l eazidnazldnaeeazeazdqqdqsd | cat -l outfile dazedaadzdazd
ls -l eazidnazldnaeazeazeaz | vive le rock
ls -l eazidnazldnaeazeazeaz | vive le rock | do this << and that
"/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)

dqfqdqqsdqsdqsdqsdqs
dazaqcdvskdvsdkvndslk | "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)
ls -l | john fine >> maybe

"/   /" ft_printf | ( "     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index) minishell > "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)
"/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index) minishell > "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)
"/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index) minishell > "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)minishell > "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index) minishell > "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)
"/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index) minishell > "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)minishell > "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index) minishell > "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)
\033[0m
cat
slfihsdlfhsdlihgsdiohg
"      slfihsdlfhsdlihgsdiohg            "
c"at"
ls -l -a john | cat outfile
ls -l >> -a john | cat > outfile
c"at" outfile
 cat
">" ">"
">"">"
">>" john
< infile "ca"t | ls
< infile "c"'a't | ls
< "in"fi'le' cat | ls
<
 "in"fi'le' cat | ls
<
"in"fi'le' cat | ls
< "in"fi'le' cat | "ls
ls -lol
< "in"fi'le' cat | "ls
< "in"fi'le' cat | "ls"
< | comm
cnd jckdsb
< < dsh
< infile hdf -ds << hdbc | dhcb
<< stop
ls << john | bonjour ca va > oui
bon << john
john ls << youhou
<<
<< john
<< okqwe dasa
<< efsjfsdfjsdlfdgjsgjslfgjvsfg
afvsdm < okadfopedk\
dwqqwfc
dwaas
efa
das
john >> bonjour | oui < non | encore << delliitter?
> dernier
fsg > oui
< infile cmd1 | cmd2 > outfile
john ko
john k  |md rf
john | john
< infile cat hello | << pewpew cat > outfile >> outfile_app
hello << john
< infile cat hello
< infile cat hello | john
< infile cat hello | << pewpew
< infile cat hello | << pewpew cat
< infile cat hello | << pewpew cat > outfile
< infile cat hello | << pewpew cat > outfile >>
< infile cat hello | << pewpew cat > outfile >> john
< infile cat hello | << pewpew cat > outfile >> outfile_app eazeazeazeazeazazeaz
< infile cat hello | << pewpew cat > outfile >> outfile_app fzefesdfsdfsdfsdfsdf
< infile cat hello | << pewpew cat > outfile >> outfile_app aeaihazidhqidhqs
< infile cat hello | << pewpew cat > outfile >> outfile_app aeaihazidhqidhqs
< infile cat hello | << "pewpew" cat > 'outfile' >> outfile_app
  e
Problem with indexes
-----------
	ft_printf("%?35s\n" "...")

	ft_printf("%?35s\n" "...")

bsd fhd > chdbsa << lbcd
ls -l -a | john << stop
ls -l -a | << stop grep out
ls -l | cat << | grep file
< infile cat hello | << pewpew cat > outfile >> outfile_app aeaihazidhqidhqs

< infile cat hello | << pewpew cat > outfile >> outfile_app aeaihazidhqidhqs

< infile cat hello | << pewpew cat > outfile >> outfile_app aeaihazidhqidhqs

< Makefile cat
john hello nope
echo john fine
echo john
echo john > outfile
< infile echo john > outfile
< infile echo john > outfile | bonjourno cat << delimiter
hello john john john | encore john
< infile cmd -option >> some | cmd arg arg arg | smthg
V// ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)ls -l eazidnazldnaeazeazeaz | vive le rock | do this << and that
	ft_printf("block = %d\nelems = %d\n" block elems)

void	upd_token_heads(t_token *token)
	ft_printf("token->content = %s\ntoken->head->content = %s\n" entry->token->content entry->token->head->content)

< Makefie < infile cat
void	init_pipe(t_token **token int *pipe_fd)

[200ls -l eazidnazldnaeazeazeaz | vive le rock | do this << and that
ls -l eazidnazldnaeazeazeaz | vive le rock | do this << and that >> app
ls -l eazidnazldnaeazeazeaz | vive le rock | < infile do this << and that >> app > outfile
cat bonjour > john | oui >> non
john bonjour
john bonjour | oui et non
bonjour john > ici | hop >> par_la
bonjour john > ici | hop >> par_la encore
bonjour john > ici << tac < toc_pof | hop >> par_la encore ici
		ft_printf("here tmp_bis = %s\n" tmp_bis->content)

bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial
bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes
john bonjour > truc ici < la >> john << bof
john bonjour > truc ici < la >> john << bof << nouveau_delimiter
john bonjour > truc ici < la >> john << bof| zbim << nouveau_delimiter
bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

	bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes4
\033bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes4
- pipe activated bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes
(%d %d)
pipe activated bonjour john > ici | hop >> par_la encore | cat < encore >> un << test > trop_genial | infinite pipes

  Ã¢Â€Â¢ cmd[0] = infinite
%d
another one for the road
  Ã¢Â€Â¢
ls -l | grep minishell > outfile
cat "" -e
<< $HOME | < $HOME > $HOME
< hello
> hello
< hello john john
< hello john
cur->prev
[200<< $HOME | < $HOME > $HOME^C
<< $HOME | < $HOME > $HOME^C
cur->prev && (ft_strcmp(cur->prev->content "<<") != 0))
[200<< $HOME | < $HOME > $HOME
[200if ((cur->prev && (ft_strcmp(cur->prev->content "<<") != 0)))

ft_printf("cur->prev = %s\n" cur->prev->content)
expand_token(entry cur env)
$HOME | < $HOME > $HOME
< infile cat > outfile1 > outfile2 | john
make re
ls
cat infile2
cat infile2 -e
john bonjour >>  coucou << infile
cat << infile >> outfile >> ls << re
cat infile
< infile cat > outfile
cat hello
cat hello -e
" "
test
new commqnd
new command
testing
une nouvelle command
john encore
okokk
super ÃƒÂ§a fonctionne
ici
Encore un
testing watcher
< infile cat -e infile2
< infile cat infile2
we
we"
echo something
echo -n something
pwd
cd src
unset PATH
env
env -i
cat infile
export PATH=truc
< infile cat | cat > outfile
cat infile | ls
cat infile | wc -l
[200cat infile | wc -l
cat infile | wc -l
cat < infile
cat < infile | wc -l
echo salut
export
cd
echo -n salut
bash
cat infile | wc -
cat infile | wc -l > infile
cat < infile | wc -l > infile
cat < infile | wc -l > outfile
cat < infile | wc -l >> outfile
cat < infile | grep e >> outfile | < outfile wc -l > john
cat < infile | grep e >> outfile | <  wc -l > john
cat < infile | grep e >> outfile | < new wc -l > john
cat < infile | grep e | wc -l > john
cat < infile | grep e | wc -l | echo salut > john
cat < infile | grep e
cat < infile | grep e | wc -l
hello > bonjour
hello > cat infile
hello goodbye obladi > oblada
echo -n fine | cat hello > outfile
echo -n fine | < hello cat > outfile | echo end >> outfile
echo -n fine | < hello cat > outfile | echo end >> outfile
$> \n (touche entrÃƒÂ©e)
$> [que des espaces]
$> [que des tabulations]
$> :
\n
:
!
>
>>
<>
> > > >
>> >> >> >>
>>>> >> >> >>
/
//
/.
/./../../../../..
///////
\\
\\\\
\\\\\\\\
-
|
| hola
| | |
||
|||||
|||||||||||||
>>|><
&&
&&&&&
&&&&&&&&&&&&&&



()
( ( ) )
( ( ( ( ) ) ) )
"hola"
'hola'
''
*
*/*
.
..

ABC=hola
4ABC=hola
hola
hola que tal
Makefile
! john
!john
fine
this
cat infilez
cat empty
bonjour
cat nono
cat infile | grep e
john
john john | pillow fissa
john john"
john john"  | cat infile
john john"  | cat infile | cat README.md
cat infile  | john infile | cat README.md
cat infile  | cat README.md
cat infile  | cat README.md | john infile
john infile | cat infile  | cat README.md
cat infile  | cat README.md | john infile
cat infile  | john infile | cat README.md
john infile | cat infile | cat README.md
cat infile | cat README.md | john infile
john infile | cat infile  | cat README.md
cat john
john "
ok3
cat john
cat doggy
helol
good doggo
if (tmp->next && tmp->next->block != tmp->block)
cat ls -l
dazaqcdvskdvsdkvndslk | "/   /" ft_printf | ("     [%d] indexÃ‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·Ã‚Â·= %d\n"| [i tmp->index)
cati john
cat john$HOME
cat eqwe$HOME
eqwe $HOME
eqwe$HOME
/bin/cati
/bin/cat
/bin/cat john
< "in"fi'le' cat | "ls
 for non RH/Debian xterm can't hurt for RH/DebiÃ¯Â¿Â½
< "in"fi'le' cat | "ls
 for non RH/Debian xterm can't hurt for RH/DebiÃ¯Â¿Â½
voidinit_pipe(t_token **token int *pipe_fd)
ls -l eazidnazldnaeazeazeaz | vive le rock | do this << and that
H/DebiÃ¯Â¿Â½
< infile cat >> john > infile2
cat infile | wc -l
f
eqwe
john/cat
john/bin/cat
eqwe/bin/cat
eqwe$HELLO
echo /home/john/stouitou
cd /home/john/stouitou
$HELLO
l$b
ls -la
export b="s -la"
cat Makefile
cat | ls
[A
?
$hello
$HELLO"pierre"
$HELLO"Pierre"
< "in"fi'le' cat | "ls
 for non RH/Debian xterm can't hurt for RH/DebiÃ¯Â¿Â½
ls -l eazidnazldnaeazeazeaz | vive le rock | do this << and that
H/DebiÃ¯Â¿Â½
cat infile | wc -l
f
john john"
john john"  | cat infile | cat README.md
cat infile  | cat README.md
"hello"john"hello"
dif
$'HOME'
$"HELLO"
salut$home"pierre"
salut$home
salut$pierre"hello"
< "in"fi'le' cat | "ls
 for non RH/Debian xterm can't hurt for RH/DebiÃ¯Â¿Â½
ls -l eazidnazldnaeazeazeaz | vive le rock | do this << and that
H/DebiÃ¯Â¿Â½
cat infile | wc -l
f
$HOME"Sarah"
$HOME"Sarah"'pierre'
$HOME"Sarah"'pierre'john
bonjour$HOME"Sarah"'pierre'john
first bonjour$HOME"Sarah"'pierre'john
first bonjour$HOME"Sarah"'pierre'john end
first bonjour$home"Sarah"'pierre'john end
$homefirst bonjour$home"Sarah"'pierre'john end
$HOMEfirst bonjour$home"Sarah"'pierre'john end
$home"john"
	ft_printf("token->content = %s\n" token->content)

$home"john'
< infile | outfile >
< infile |  > outfile
< infile | > outfile
< infile | > outfile

< infile | > outfile

$HOME"john"
| "hello" hello
make fclean
clear
exi
"in"fi'le' cat | "ls
cat Makefile |
. ls
ls /home/stouitou/.local/funcheck/
...
ls | .. cat Makefile
cat README.md |
cat infile > outfile > john
cat < infile < new < maybe
john < infile1 < infile2
cat < infile < john < maybe
cat < infile >> john > maybe
cat < infile >> john > maybe >> john > another
cat < infile >> john > maybe >> john > another > one
cat < infile >> john > maybe >> john > another > one < no
cat < infile >> john > maybe >> john > another > one < no

cat < infile >> john > maybe >> john > another > one < no

cat > infile > john > maybe
cat < infile < john < maybe
cat < infile < john < maybe

cat < maybe > outfile >> john
cat infile | cat $PATH$LANG
cat "infile
$LANG
make
$'$'
$
$"$""$""$"
$"$"
$"$ "
$" $ "
$"                            $ "
$"$LANG"
$"LANG"
"$""$""$""$""$""$""$"
"$""$""$""$""$""$""$""$"
$"$"$"$"$"$"$
$"$"$"$"$"$"
"$"$
?"cat" Makefile
? "cat" Makefile
? cat Makefile
$?$
"$"
$"$"$"$"
$"$"$"$"$
"$"$"$"
$"$"$"$""$"$"$"
$>
! test
cat "            "
echo hello world
ok
$LANG
$?LANG
$!LANG
$+LANG
$LANGOK
$HOME
$HOME$PATH
ok$HOME
$HOUME
$HOUMEOK
$HOME$PATHES
$HOME$PATHES
$HOMEZ
$HOMEW
$HOMEW
ok$HOMEW
"ok"$HOMEW
ok$HOME W
ok$HOME
ok$ HOME
ok$ HOME
ok$=HOME
ok$?OME
oops$HOME
cat < infile > cat >> ok
cat < infile >> cat >> ok
cvdmh djksb|          jkds
bonjour$HOME"Sarah"'pierre'oops
bonjour$HOME"Sarah"'pierre
bonjour$HOME"Sarah"'pierre'
$HOUMEOK
$HOUMEOK
$HOUMEOK
$HOUMEOK
$HOME"ok"
$HOME "ok"
$HOMEZ$PATH
$HOMEZ$PATH
$HOMEW$PATH
$LANGW$PATH
$HOMEW$LANG
$HOM
$HOME-$PATH
$HOME-
$HOMEA
$HOME+
$HOME-$LANG
$HOMEW-$LANG
$HOMEW-$LANG-
$HOMEW-$LAN-G-
200$HOUMEOK
yi jfdsv |b < CBHJB
"$ "$
$"$"$ infile
$"$"$infile
$"$*"
$"$**"
$"$XXX"
$"$oooooooo"
$"$xyzw"

$"$xyzw" | cati Makefile
if (!tmp)
$"$xyzw"~
$"$home"
$"w$xyzw"
$"w$"
"$"wxy$
$"w$
$"wxy$"
$"$w"
"$"wxy$abc
cat "" Makefile
$"$hello"
cat "" saluuuut
cat ok saluuuut
;;
;;;;;
;;;;;;;;;;;;;;;
~
cat "" Saluuuuut
$"HOME
$"$ >"
$"$>"
$+
$HOME$LANG $SHELL"$"$
"$"$$
"$"$ $ "$"
"$"$ $ "$" | ls -l
-----------------------------       
$?$?
?$HOME
$HOMEdskjhfkdshfsd
"$HOMEdskjhfkdshfsd"
'$HOMEdskjhfkdshfsd'
$DONTEXIST
$LESS$VAR
"$home"
"$ home"    
ifconfig | grep ":"
ifconfig | grep hola
whoami | grep $USER
whoami | grep $USER > /tmp/bonjour cat /tmp/bonjour
whoami | cat -e | cat -e > /tmp/bonjour cat /tmp/bonjour
whereis ls | cat -e | cat -e > /tmp/bonjour cat /tmp/bonjour
ls | hola
ls | ls hola
ls | ls | hola
ls | hola | ls
ls | ls | hola | rev
ls | ls | echo hola | rev
ls -la | grep "."
ls -la | grep "'.'"
ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls|ls
cat Makefile | cat -e | cat -e
cat Makefile | grep srcs | cat -e
cat Makefile | grep srcs | grep srcs | cat -e
cat Makefile | grep pr | head -n 5 | cd file_not_exist
cat Makefile | grep pr | head -n 5 | hello
sleep 3 | sleep 3
time sleep 3 | sleep 3
echo hola > bonjour | cat bonjour
echo que tal >> bonjour | cat bonjour
echo hola > bonjour | echo que tal >> bonjour | cat < bonjour
echo hola > bonjour | rm bonjour | echo que tal >> bonjour | cat < bonjour
echo hola que tal > bonjour | cat bonjour
echo hola que tal > /tmp/bonjour | cat -e /tmp/bonjour
export HOLA=hey | echo bonjour > $HOLA | echo $HOLA
whereis grep > Docs/bonjour | cat Docs/bonjour
ls -la > Docs/bonjour | cat Docs/bonjour
pwd>bonjour | cat bonjour
pwd >                     bonjour | cat bonjour
echo hola > > bonjour | echo hola < < bonjour | echo hola >>> bonjour | > bonjour echo hola | cat bonjour
> bonjour | echo hola | cat bonjour
prout hola > bonjour | ls
echo hola > hello >> hello >> hello | ls | cat hello
echo hola > hello >> hello >> hello| echo hola >> hello | cat < hello
echo hola > hello >> hello >> hello | echo hola >> hello | echo hola > hello >> hello >> hello | cat < hello
echo hola >> hello >> hello > hello | echo hola >> hello | cat < hello
echo hola >> hello >> hello > hello | echo hola >> hello | echo hola >> hello >> hello > hello | cat < hello
echo hola > hello | echo hola >> hello >> hello >> hello | echo hola >> hello | cat < hello
echo hola > hello | echo hey > bonjour | echo <bonjour <hello
echo hola > hello | echo hey > bonjour | echo <hello <bonjour
echo hola > bonjour | echo hey > hello | rm bonjour hello | echo hola > bonjour > hello > bonjour | cat bonjour | cat hello
echo hola > bonjour | echo hey > hello | echo hola > bonjour > hello > bonjour | cat bonjour | cat hello
echo hola > bonjour | echo hey > hello | rm bonjour hello | echo hola > bonjour >> hello > bonjour | cat bonjour | cat hello
echo hola > bonjour | echo hey > hello | rm bonjour hello | echo hola > bonjour > hello >> bonjour | cat bonjour | cat hello
echo hola > bonjour | echo hey > hello | echo hola > bonjour > hello >> bonjour | cat bonjour | cat hello
echo hola > bonjour | echo hey > hello | rm bonjour hello | echo hola >> bonjour > hello > bonjour | cat bonjour | cat hello
echo hola > bonjour | echo hey > hello | echo hola >> bonjour > hello > bonjour | cat bonjour | cat hello
echo hola > bonjour | echo hey > hello | rm bonjour hello | echo hola >> bonjour >> hello >> bonjour | cat bonjour | cat hello
echo hola > bonjour | echo hey > hello | echo hola >> bonjour >> hello >> bonjour | cat bonjour | cat hello
> bonjour echo hola bonjour | cat bonjour
>bonjour echo > hola>bonjour>hola>>bonjour>hola hey >bonjour hola >hola | cat bonjour | cat hola
echo bonjour > hola1 | echo hello > hola2 | echo 2 >hola1 >> hola2 | ls | cat hola1 | cat hola2
echo bonjour > hola1 | echo hello > hola2 | echo 2 >>hola1 > hola2 | ls | cat hola1 | cat hola2
< Makefile .
cat <pwd
cat <srcs/pwd
cat <../pwd
cat >>
cat >>>
cat >> <<
cat >> > >> << >>
cat < ls
cat < ls > ls
cat > ls1 < ls2 | ls
>>hola | cat hola
echo hola > bonjour | cat < bonjour
echo hola >bonjour | cat <bonjour
echo hola>bonjour | cat<bonjour
echo hola> bonjour | cat< bonjour
echo hola               >bonjour | cat<                     bonjour
echo hola          >     bonjour | cat            <         bonjour
echo hola > srcs/bonjour | cat < srcs/bonjour
echo hola >srcs/bonjour | cat <srcs/bonjour
e'c'""h""o hola > bonjour | cat 'bo'""n""jour
echo hola > bonjour\ 1 | ls | cat bonjour\ 1
echo hola > bonjour hey | ls | cat bonjour | cat hey
echo hola > srcs/bonjour | echo hey > srcs/hello | >srcs/bonjour >srcs/hello <prout | cat srcs/bonjour srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | rm srcs/bonjour srcs/hello | >srcs/bonjour >srcs/hello <prout | ls srcs | cat srcs/bonjour srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | >srcs/bonjour <prout >srcs/hello  | cat srcs/bonjour  | cat srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | rm srcs/bonjour srcs/hello | >srcs/bonjour <prout >srcs/hello  | ls srcs | cat srcs/bonjour
echo hola > ../bonjour | echo hey > ../hello | >../bonjour >../hello <prout | cat ../bonjour ../hello
echo hola > ../bonjour | echo hey > ../hello | rm ../bonjour ../hello | >../bonjour >../hello <prout | ls .. | cat ../bonjour ../hello
echo hola > ../bonjour | echo hey > ../hello | >../bonjour <prout >../hello  | cat ../bonjour  | cat ../hello
echo hola > ../bonjour | echo hey > ../hello | rm ../bonjour ../hello | >../bonjour <prout >../hello  | ls .. | cat ../bonjour
echo hola > srcs/bonjour | echo hey > srcs/hello | >srcs/bonjour >>srcs/hello <prout | cat srcs/bonjour  | cat srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | >>srcs/bonjour >srcs/hello <prout | cat srcs/bonjour  | cat srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | >>srcs/bonjour >>srcs/hello <prout | cat srcs/bonjour  | cat srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | >srcs/bonjour <prout >>srcs/hello | cat srcs/bonjour  | cat srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | >>srcs/bonjour <prout >srcs/hello | cat srcs/bonjour  | cat srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | >>srcs/bonjour <prout >>srcs/hello | cat srcs/bonjour  | cat srcs/hello
echo hola > srcs/bonjour | echo hey > srcs/hello | <prout >>srcs/bonjour >>srcs/hello | cat srcs/bonjour  | cat srcs/hello
echo hola > bonjour | echo hey > hello | <bonjour >hello | cat bonjour  | cat hello
echo hola > bonjour | echo hey > hello | >bonjour >hello < prout | cat bonjour  | cat hello
echo hola > bonjour | echo hey > hello | rm bonjour hello | >bonjour >hello < prout | cat bonjour  | cat hello
echo hola > bonjour | echo hey > hello | >bonjour <prout hello | cat bonjour  | cat hello
echo hola > bonjour | echo hey > hello | rm bonjour hello | >bonjour <prout hello | cat bonjour 
echo hola > bonjour
<bonjour cat | wc > bonjour
cat bonjour
echo que tal >> bonjour
cat < bonjour
rm bonjour
echo hola que tal > bonjour
echo hola que tal > /tmp/bonjour
cat -e /tmp/bonjour
export HOLA=hey
echo bonjour > $HOLA
echo $HOLA
whereis grep > Docs/bonjour
cat Docs/bonjour
ls -la > Docs/bonjour
pwd>bonjour
pwd >                     bonjour
echo hola > > bonjour
echo hola < < bonjour
echo hola >>> bonjour
> bonjour echo hola
> bonjour | echo hola
prout hola > bonjour
echo hola > hello >> hello >> hello
echo hola >> hello
cat < hello
echo hola >> hello >> hello > hello
echo hola > hello
echo hola >> hello >> hello >> hello
echo hey > bonjour
echo <bonjour <hello
echo <hello <bonjour
echo hey > hello
rm bonjour hello
echo hola > bonjour > hello > bonjour
echo hola > bonjour >> hello > bonjour
echo hola > bonjour > hello >> bonjour
echo hola >> bonjour > hello > bonjour
echo hola >> bonjour >> hello >> bonjour
> bonjour echo hola bonjour
>bonjour echo > hola>bonjour>hola>>bonjour>hola hey >bonjour hola >hola
cat hola
echo bonjour > hola1
echo hello > hola2
echo 2 >hola1 >> hola2
cat hola1
cat hola2
echo 2 >>hola1 > hola2
> pwd
< pwd
cat > ls1 < ls2
>>hola
echo hola >bonjour
cat <bonjour
echo hola>bonjour
cat<bonjour
echo hola> bonjour
cat< bonjour
echo hola               >bonjour
cat<                     bonjour
echo hola          >     bonjour
cat            <         bonjour
echo hola > srcs/bonjour
cat < srcs/bonjour
echo hola >srcs/bonjour
cat <srcs/bonjour
e'c'""h""o hola > bonjour
cat 'bo'""n""jour
echo hola > bonjour\ 1
cat bonjour\ 1
echo hola > bonjour hey
cat hey
echo hey > srcs/hello
>srcs/bonjour >srcs/hello <prout
cat srcs/bonjour srcs/hello
rm srcs/bonjour srcs/hello
ls srcs
>srcs/bonjour <prout >srcs/hello 
cat srcs/bonjour 
cat srcs/hello
cat srcs/bonjour
echo hola > ../bonjour
echo hey > ../hello
>../bonjour >../hello <prout
cat ../bonjour ../hello
rm ../bonjour ../hello
ls ..
>../bonjour <prout >../hello 
cat ../bonjour 
cat ../hello
cat ../bonjour
>srcs/bonjour >>srcs/hello <prout
>>srcs/bonjour >srcs/hello <prout
>>srcs/bonjour >>srcs/hello <prout
>srcs/bonjour <prout >>srcs/hello
>>srcs/bonjour <prout >srcs/hello
>>srcs/bonjour <prout >>srcs/hello
<prout >>srcs/bonjour >>srcs/hello
<bonjour >hello
cat bonjour 
>bonjour >hello < prout
>bonjour <prout hello
<a cat <b <c
cat a
cat b
cat c
>a ls >b >>c >d
cat d
echo hola > a > b > c
mkdir dir
ls -la > dir/bonjour
cat dir/bonjour
<a
>d cat <a >>e
cat e
< a > b cat > hey >> d
$'$ '"  $ $ "
$'$ '"  $ $? $ "
$'$ '"  $ $? $PATH$home$HOME "
$'$ '"  $ $? $PATH$home$HOME$ "
$'$ '"  $ $? $PATH$home$HOME$ " $"$'$'"
helll
cat "Makef"'ile'
echo $LANG
cat < infile | grep 3 >> stop > outfile
exe->iod_fd[i]
cat < infile > outfile
cat < infile >> outfile
cat < infile | grep 3 >> stop > outfile > outfile2
cat < infile | grep 3 >> stop > outfile > outfile2 > outfile3
cat < infile | grep 3 >> stop
cat < infile | grep 3 > stop
cat < infile | grep 3 > stop >> outfile
cat outfile
cat < infile | grep 3 > stop > outfile2 > outfile4
< infile cat | grep 3 > outfile >> outfile1 > outfile2
[200~printf("HERE\n");
cat < infile | grep 3 > outfile >> outfile1 > outfile2
cat infile | << stop
cat outfile | << stop
cat < outfile
cat < infile2 << stop | grep 4 > outfile
cat blablabla | << stop
cat infile << | ls
ft_printf("here1\n");
ft_fprintf(2, "exe->cmd[0] = %s\n", exe->cmd[0]);
ft_fprintf(2, "Here\n");
printf("HERE\n");
dif
printf("HERE\n");
dif
cat << stop
cat << stop | > outfile
cat << stop | cat > outfile
cat << stop > outfile
cat john | > outfile
cat < john < dernier > outfile
cat < john << stop < dernier > outfile
cat < john << stop << stop2 < dernier > outfile
cat < john << stop << stop2 > outfile
cat <infile << stop >> outfile | grep 2 >> outfile
cat <infile << stop > outfile | grep 2 >> outfile
cat <infile << stop >> outfile | grep 2 >> outfile2
cat <infile << stop >> outfile
cat <infile << stop >> outfile | cat john
cat <infile << stop > outfile | cat john
cat <infile << stop < john > outfile | cat john
cat <infile < john > outfile | cat john
cat < infile < john > outfile | cat john
printf("HERE\n");
dif
cat >
cat john 
cat infile << stop < ok | grep 0 > outfile
cat < infile << stop < ok | grep 0 > outfile
\
::
mkdir a
ls hola
./Makefile
./minishell
cat | cat | cat | ls
cat < infile << stop >> outfile | grep 2 >> outfile2
> new cat < infile < stop | grep is >> outfile2
> new cat < infile << stop | grep is >> outfile2
cat < infile < stop | < outfile grep me >> outfile2
cat < infile << stop | grep 2 outfile
cat << stop << stop2 | grep 2
exit 42
exit 3
exit 8
cat Makefile | exit 5
cat Makefile | exit 5 6
echo $? | exit bc
exit 9 pg | ls
exit 1 a
exit a 1
exit 13
cat outfile | exit a
cat outfile | exit 1 a
cat outfile | exit 1
cat Makefile | exit 1
exit 1
exit 50
exit a
exit w
exit 5
exit 500 > outfile9
exit 4 82 6 2 4 p
exit 4 5 p
exit 5 6 p
exit 1 2 p
exit 5 78 12 4
exit 5 78 12 4 p c
exit fr 4
exit p 1 51
exit < infile > test3
cat > outfile11 < infile45
cat > src < infile45
exit 2 8 6 4
exit a 8 6 4
exit < infile45
exit < infile > outfile > outfile1 > src
exit > src > outfile2
exit p  25 15 a
exit 123456879123546789123
cat Makefile | exit > src
exit 789
exit 56 p
exit p 56
cat Makefile | exit 789
cat Makefile | exit 789 | grep 21 > outfile5
cat Makefile | exit 789 p | grep 21 > outfile5
cat Makefile | exit p 789 | grep 21 > outfile5
cat Makefile > outfile5 | exit | exit |exit 
exit 12 12 | exit p | exit 5
echo $/
exit 12 12 | exit p | exit << stop
exit << stop
cat << stop | grep 2 >> outfile
cat << stop | grep 2 >> outfile | exit 5
exit exit
exit hola
exit hola que tal
exit 000042
exit 666
exit 666 666
exit -666 666
exit hola 666
exit 666 666 666 666
exit 666 hola 666
exit hola 666 666
exit 259
exit -4
exit -42
exit -0000042
exit -259
exit -666
exit +666
exit 0
exit +0
exit -0
exit +42
exit -69 -96
exit --666
exit ++++666
exit ++++++0
exit ------0
exit "666"
exit '666'
exit '-666'
exit '+666'
exit '----666'
exit '++++666'
exit '6'66
exit '2'66'32'
exit "'666'"
exit '"666"'
exit '666'"666"666
exit +'666'"666"666
exit -'666'"666"666
exit 9223372036854775807
exit 9223372036854775808
exit -9223372036854775808
exit -9223372036854775809
exit 555 555
ls | exit
ls | exit 42
exit | ls
exit -9223372036854775807
exit -9223372036854775806
cat outfile > ./joe/tmp
access(copy, F_OK)
V
vdmh djksb|          jkds

john john"  | cat infile
cat Makefile | env
env | grep MAIL > outfile
env $PATH -i
env $LANG -i
echo "<"
env $LANG
exit 5 89
echo
echo -e hello
echo -n hello
echo hello -n
echo ""
echo "hello" -n
echo "$LANG"
echo -pp ok
exit | cat -e bonjour
cat -e bonjour | exit
echo | echo
echo hello fine
echo hello hello
echo hello hello fine
echo -n
echo fine
echo fine hello ok
echo fine hello ok > bonjour
echo fine2 hello2 ok2 >> bonjour
echo -n ""
echo -n "ok"
echo -n " "
echo hello "" fine
echo hello  fine
echo hello '' fine
cat boujour | echo hello '' fine
cat bonjour | echo hello '' fine
echo hello '' fine | cat bonjourecho hello | cat Makefile
echo hello | cat $LANG
cat Makefile | echo hello
echo hello > outfile
echo hello | grep hello | cat outfile
echo hello | grep test > outfile
echo hello | grep hello > outfile
env > outfile
env | grep PATH > outfile
< infile env | grep PATH > outfile2
< Makefile env | grep PATH > outfile2
<< stop1 << stop2 | ls > << stop3
<< stop1 << stop2 | < << stop3
<< stop1 << stop2 | cat ok < << stop3
<< stop1 << stop2 "cat Makefile << stop3
<< stop1 << stop2 > > "cat Makefile << stop3
<< stop1 << stop2 | "cat Makefile" << stop3
< Makefile cat | "ls
< Makefile cat | << stop "ls
<< stop1 cat | > < grep 1 << stop2 
super Ã§a fonctionne
entry->token->content
-----------------------------
"$ home"
cat Makefile > outfile5 | exit | exit |exit
echo hello '' fine | cat bonjour
echo hello | cat Makefile
env | cat Makefile
< infile env
export TEST=abc
export LANG=en
export USER=poriou
export PORIOU=poriou
export TEST=OK
export TEST=test
export test=test
exit < outfile > infile
export TEST1=test
xport TEST1=test
export TEST1=test TEST2=test2
export TEST1=test TEST2=test2 TEST3
export TEST1=test TEST2=test2 TEST3 TEST4=test4
export TEST1=test TEST2+=complete TEST3 TEST4=test4
export TESxport TEST1=test TEST2+=complete TEST3 TEST4=test4
export TEST1=test1 TEST2=test2
export TEST1=test1 TEST2+=complete2
export TEST1+=test1
export TEST1+=complete1
export TEST1=ok
export TEST1=
export TEST1=test1
export TEST+=end
export TEST+=end NO
export TEST+=end NO YES=yes
export TEST=end NO YES=yes
export TEST=test TEST2=test2 TEST3+=test3
export TEST=$LANG
echo $TEST
echo $LAMG
echo $LQNGTEST
echo $LANGTEST
export TEST=test1
export OK
export ""
export ERERWREW
export                  HOLA=bonjour
export Hola
export $DONTEXIST
export | grep "HOME"
export =
export %
export $?
export 5
cati
cat infile | exit
export ?=2
export 9HOLA=
export HOLA9=bonjour
export _HOLA=bonjour
export ___HOLA=bonjour
export ___HOL@=bonjour
export -HOL@=bonjour
export -HOLA=bonjour
export KEY
export KEy
export KEY=
export TEST
export TEST1=test1 OK TEST2=test2
export TEST1=test1 =OK TEST2=test2
export TEST1=test1 =OK TEST44444444=test44444444
export HO$?LA=bonjour
export $?HOLA=bonjour
export +HOLA=bonjour
exportHOLA
export HOLA =bonjour
export HOLA = bonjour
export TEST1=test1 = TEST2=test2
export HOLA=bon jour
export HOLA=bon\jour
export HOLA=bon""jour""
export HOLA$USER=bonjour
export HOLA=""cat Makefile | grep NAME""  
echo 
"echo "
unset MAIL
unset TEST
unset SYSTEMD_EXEC_PID
unset SHLVL
unset 513
ls | < infile1 unset 54
ls | unset SHLVL
cat "hello$LANG"
cat "hello$LANG
